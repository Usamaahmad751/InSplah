{"version":3,"sources":["components/masonry.js","components/pagination.js","components/header.jsx","App.js","serviceWorker.js","index.js"],"names":["ImageMasonry","Fragment","className","columnsCountBreakPoints","350","750","900","gutter","this","props","images","map","i","key","href","user","portfolio_url","target","name","taget","links","download","width","height","viewBox","version","aria-hidden","d","src","urls","regular","Component","Pagination","state","pageNumbers","push","aria-label","currentPage","onClick","handlePaginate","Header","type","onKeyPress","e","handleSearch","onChange","onChangeSearch","placeholder","onchangeItem","value","App","isLoading","search","imagesPerPage","baseUrl","searchUrl","p","setState","url","fetch","then","response","json","data","results","console","log","handleChange","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96b174ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\r\nclass ImageMasonry extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"masonary-wrapper\">\r\n                    <ResponsiveMasonry\r\n                        columnsCountBreakPoints={{ 350: 1, 750: 2, 900: 3 }}\r\n                    >\r\n                        <Masonry gutter={\"20px\"}>\r\n                            {this.props.images.map(i => <div key={i} className=\"masonary-image\">\r\n                                <div className=\"masonry-content\">\r\n                                    <div className=\"masonry-image-user\">\r\n                                        <a href={i.user.portfolio_url} target=\"_blank\">\r\n                                            {i.user.name}</a></div>\r\n                                    <div className=\"download-image\">\r\n                                        <a className=\"btn btn-light\" taget=\"_blank\" href={i.links.download + '?force=true'}>\r\n                                            <svg width=\"32\" height=\"32\" className=\"Apljk\" viewBox=\"0 0 32 32\" version=\"1.1\" aria-hidden=\"false\"><path d=\"M25.8 15.5l-7.8 7.2v-20.7h-4v20.7l-7.8-7.2-2.7 3 12.5 11.4 12.5-11.4z\"></path></svg>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                                <img src={i.urls.regular} /></div>\r\n\r\n                            )}\r\n                        </Masonry>\r\n                    </ResponsiveMasonry>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageMasonry;","import React, { Component } from 'react';\r\nclass Pagination extends Component {\r\n    state = {};\r\n    render() {\r\n        const pageNumbers = [];\r\n        for (let i = 1; i <= 10; i++) {\r\n            pageNumbers.push(i)\r\n        }\r\n        return (\r\n            <nav aria-label=\"Page navigation\" className=\"pagination-wrapper\">\r\n                <ul className=\"pagination text-center\">\r\n                    {pageNumbers.map(i =>\r\n                        <li key={i} className={\"page-item \" + (this.props.currentPage === i ? \"active\" : \"\")} ><a className=\"page-link\" onClick={() => this.props.handlePaginate(i)} href=\"#\" >{i}</a></li>\r\n                    )}\r\n\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination;","import React, { Component } from 'react';\r\nclass Header extends Component {\r\n    state = {}\r\n\r\n    render() {\r\n        var itemsperPage = [10, 15, 20, 25, 30];\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"header-wrapper\">\r\n                    <div className=\"header-logo\">InSplash</div>\r\n                    <div className=\"search-wrapper\">\r\n                        <div className=\"m-2 text-center search-box\">\r\n                            <input type=\"text\" onKeyPress={(e) => e.key === 'Enter' && this.props.handleSearch()} onChange={(e) => this.props.onChangeSearch(e)} placeholder=\"Search Images\" />\r\n                            <button onClick={this.props.handleSearch} className=\"search-btn\">\r\n                                <svg width=\"32\" height=\"32\" className=\"_35lll _3FpBp _24pSQ\" viewBox=\"0 0 32 32\" version=\"1.1\" aria-hidden=\"false\"><path d=\"M22 20c1.2-1.6 2-3.7 2-6 0-5.5-4.5-10-10-10S4 8.5 4 14s4.5 10 10 10c2.3 0 4.3-.7 6-2l6.1 6 1.9-2-6-6zm-8 1.3c-4 0-7.3-3.3-7.3-7.3S10 6.7 14 6.7s7.3 3.3 7.3 7.3-3.3 7.3-7.3 7.3z\"></path></svg>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"extra-wrapper\">\r\n                        <div className=\"imagesperPage\">\r\n                            <p>Images per Page</p>\r\n                            <select className=\"select-wrapper\" onChange={(e) => this.props.onchangeItem(e)}>\r\n                                {\r\n                                    itemsperPage.map(i => <option key={i} value={i}>{i}</option>)\r\n                                }\r\n                            </select>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ImageMasonry from './components/masonry';\nimport Pagination from './components/pagination';\nimport Header from './components/header';\n\n\nclass App extends Component {\n  state = {\n    images: [],\n    isLoading: false,\n    currentPage: 1,\n    search: '',\n    imagesPerPage: 50,\n    baseUrl: 'https://api.unsplash.com/photos?client_id=XC7xqCqltdJSHSoICF8TmfhLgitecscq706E5CwMjEk',\n    searchUrl: 'https://api.unsplash.com/search/photos?client_id=XC7xqCqltdJSHSoICF8TmfhLgitecscq706E5CwMjEk'\n  }\n  handlePaginate = (p) => {\n    this.setState({ currentPage: p, isLoading: false })\n    let url = '';\n    if (this.state.search !== '') {\n      url = this.state.searchUrl + '&page=' + p + '&per_page=' + 30 + '&query=' + this.state.search;\n      fetch(url).then(response => response.json())\n        .then(data => this.setState({ images: data.results, isLoading: true }))\n    } else {\n      url = this.state.baseUrl + '&page=' + p + '&per_page=' + 30;\n      fetch(url).then(response => response.json())\n        .then(data => this.setState({ images: data, isLoading: true }))\n    }\n    console.log(url)\n  }\n  componentDidMount() {\n    const url = this.state.baseUrl + '&page=' + this.state.currentPage + '&per_page=' + this.state.imagesPerPage\n    fetch(url).then(response => response.json())\n      .then(data => this.setState({ images: data, isLoading: true }))\n    console.log(this.state.images)\n  }\n\n\n  handleChange = (e) => {\n    this.setState({ imagesPerPage: e.target.value, isLoading: false })\n    let url = '';\n    if (this.state.search !== '') {\n      url = this.state.searchUrl + '&page=' + this.state.currentPage + '&per_page=' + e.target.value + '&query=' + this.state.search\n      fetch(url).then(response => response.json())\n        .then(data => this.setState({ images: data.results, isLoading: true }))\n    } else {\n      url = this.state.baseUrl + '&page=' + this.state.currentPage + '&per_page=' + e.target.value\n      fetch(url).then(response => response.json())\n        .then(data => this.setState({ images: data, isLoading: true }))\n    }\n    console.log(url)\n\n\n  }\n\n  handleSearch = () => {\n    const url = this.state.searchUrl + '&page=' + this.state.currentPage + '&per_page=' + this.state.imagesPerPage + '&query=' + this.state.search\n    fetch(url).then(response => response.json())\n      .then(data => this.setState({ images: data.results, isLoading: true }))\n    console.log(url)\n  }\n  onChangeSearch = (e) => {\n    this.setState({ search: e.target.value })\n    console.log(e.target.value)\n  }\n  render() {\n    console.log(this.state.images)\n    return <React.Fragment>\n      <Header onchangeItem={this.handleChange} onChangeSearch={this.onChangeSearch} handleSearch={this.handleSearch} />\n      {this.state.isLoading ?\n        this.state.images.length !== 0 ? <ImageMasonry images={this.state.images} /> : <p className=\"noImageAvailable\">Sorry! No image available accoring to your search query.</p>\n        : <p>Loading...</p>}\n      <Pagination handlePaginate={this.handlePaginate} currentPage={this.state.currentPage} />\n    </React.Fragment >\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}